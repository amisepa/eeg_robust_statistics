%% Run t-tests comparing two EEG datasets (e.g., conditions or groups)
% on real data and H0 data (i.e., bootstrap).
% 
% INPUTS:
%	data1 	- 3D data, computing bootstrap and stats from 3rd dimension (e.g., channels, samples/frequency, subjects)
%	data2 	- 3D data to compare (another condition or group)
%	nboot 	- number of iterations for the bootstrap (default = 1000)
% 	method 	- 'mean' to use paired t-test and 'trimmed mean' to use Yuen t-test default; 20% trim)
%				Yuen t-test better accounts for outliers and non-normal distributions.
%
% OUTPUTS
% 	results 	- t and p values for real data
%	results_H0 	- t and p values for H0 data
%
% Cedric Cannard, Sep 2022

function [results, results_H0] = compute_randomeffect(data1,data2,nboot,method)

% Default parameters
if ~exist('nboot','var') || isempty(nboot)
	nboot = 1000;
end
if ~exist('method','var') || isempty(method)
	method = 'trimmed mean';
end
% check if data are dependent or independent
if size(x1,3) == size(x2,3)
    dpt = 1;
end

% Run stats on real data
results = nan(size(data1,1),size(data1,2),2); % 2 for tval and pval
disp('Running statistical tests on real data...');
progressbar('EEG channels')
for iChan = 1:size(data1,1)
    nans = isnan(data1(iChan,1,:));
    x1 = data1(iChan,:,~nans);
    nans = isnan(data2(iChan,1,:));
    x2 = data2(iChan,:,~nans);

    if strcmpi(method,'trimmed Mean')
        if dpt
            [tval,~,~,~,pval,~,~] = limo_yuend_ttest(x1,y2,20,0.05);
%             [tval,~,~,~,~,pval] = yuend(x1,x2,20,0.05);   % for 2D data
        else
            [tval,~,~,~,pval,~,~] = limo_yuen_ttest(x1,y2,20,0.05);
%             [tval,~,~,~,~,~,pval] = yuen(x1,x2,20,0.05);  % for 2D data
        end
    elseif strcmpi(method,'mean')
        if dpt
            [~,~,~,~,~,tval,pval] = limo_ttest(1,x1,x2,.05);
        else
            [~,~,~,~,~,tval,pval] = limo_ttest(2,x1,x2,.05);
        end
    else
        errordlg('The method input must be ''mean'' or ''trimmed mean'' ')
    end
    results(iChan,:,1) = tval;
    results(iChan,:,2) = pval;

    progressbar(iChan / size(data1,1))
end
clear tval; clear pval

% Generate boot table (H0)
b = 1;
boot_index = zeros(size(data1,3),nboot);
while b ~= nboot + 1
    tmp = randi(size(data1,3),size(data1,3),1);
    if length(unique(tmp))-1 >= 3   % minimum number of subjects 
        boot_index(:,b) = tmp;
        b = b + 1;
    end
end
clear tmp
for iChan = size(data1,1):-1:1
    boot_table{iChan} = boot_index;
end

% Center data to estimate H0
if strcmpi(method,'trimmed Mean')
    data1_centered = data1 - repmat(limo_trimmed_mean(data1),[1 1 size(data1,3)]);
    data2_centered = data2 - repmat(limo_trimmed_mean(data2),[1 1 size(data2,3)]);
elseif strcmpi(method,'mean')
    data1_centered = data1 - repmat(mean(data1,3,'omitnan'),[1 1 size(data1,3)]);
    data2_centered = data2 - repmat(mean(data2,3,'omitnan'),[1 1 size(data2,3)]);
else
    errordlg('The method input must be ''mean'' or ''trimmed mean'' ')
end

% Estimate H0 for each channel using ttests on null data
results_H0 = NaN(size(data1,1), size(data1,2), 2, nboot);
disp('Running statistical tests on H0 data...');
for iChan = 1:size(data1,1)
    disp(['Estimating H0 for channel ' num2str(iChan) '/' num2str(size(data1,1))])
    nans = isnan(data1_centered(iChan,1,:));
    x1 = data1_centered(iChan,:,~nans);
    nans = isnan(data2_centered(iChan,1,:));
    x2 = data2_centered(iChan,:,~nans);
    
    parfor b = 1:nboot
        if strcmpi(method,'trimmed Mean')
            if dpt
                [tval{b}, ~, ~, ~, pval{b}, ~, ~] = limo_yuend_ttest( x1(:,:,boot_table{iChan}(:,b)), x2(:,:,boot_table{iChan}(:,b)) );
            else
                [tval{b}, ~, ~, ~, pval{b}, ~, ~] = limo_yuen_ttest( x1(:,:,boot_table{iChan}(:,b)), x2(:,:,boot_table{iChan}(:,b)) );
            end
        elseif strcmpi(method,'mean')
            if dpt
			    [~,~,~,~,~,tval{b},pval{b}] = limo_ttest(1,x1(:,:,boot_table{iChan}(:,b)), x2(:,:,boot_table{iChan}(:,b)), 0.05); % paired t-test for depedent varibal
            else
			    [~,~,~,~,~,tval{b},pval{b}] = limo_ttest(2,x1(:,:,boot_table{iChan}(:,b)), x2(:,:,boot_table{iChan}(:,b)), 0.05); % paired t-test for independent variables
            end
        else
            errordlg('The method input must be ''mean'' or ''trimmed mean'' ')
        end
    end
    for b = 1:nboot
        results_H0(iChan,:,1,b) = tval{b};
        results_H0(iChan,:,2,b) = pval{b};
    end
end

disp('Random effects computed.')
